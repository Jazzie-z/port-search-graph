{"version":3,"sources":["components/Graph/Graph.module.css","components/Filter/Filter.module.css","actions/index.js","constants/environment.js","utils/httpHelper.js","constants/resource.js","components/ErrorMsg/ErrorMsg.js","utils/dateHelper.js","actions/graphAction.js","components/SelectOption/SelectOption.js","components/PortSelector/PortSelector.js","components/Filter/Filter.js","components/Graph/Graph.js","App.js","actions/portAction.js","reducers/port.js","reducers/graph.js","reducers/index.js","store.js","index.js"],"names":["module","exports","PORTS","PORTS_SUCCESS","PORTS_ERROR","GRAPH","GRAPH_SUCCESS","GRAPH_ERROR","DATE_FILTER","GRAPH_FILTER","ENV","HEADERS","headers","SUCCESS_RESPONSE","response","data","error","ERROR_RESPONSE","staticText","message","description","origin","destination","graphTypes","ErrorMsg","style","maxWidth","margin","type","showIcon","closable","defaultProps","DATE_FORMATS","formatTimeStamp","timeStamp","moment","format","filterDataWithinRange","dateRange","filter","e","day","isSameOrAfter","isSameOrBefore","appendQuery","Option","Select","SelectOption","options","value","onChange","placeholder","span","showSearch","width","map","i","code","name","PortSelector","ports","useState","activePort","setActivePort","dispatch","useDispatch","useEffect","payload","axios","get","then","res","length","find","high","low","mean","valueOf","catch","err","console","justify","val","prev","RangePicker","DatePicker","Filter","setDateRange","useSelector","state","port","loading","size","className","styles","spinner","direction","container","date","CheckboxGroup","Checkbox","Group","Graph","graph","display","wrapper","ResponsiveContainer","height","LineChart","top","right","left","bottom","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","tickFormatter","domain","YAxis","unit","Tooltip","labelFormatter","formatter","includes","Line","connectNulls","stroke","dot","title","card","checkbox","App","action","combineReducers","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccfbb6fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Graph_wrapper__3bGCe\",\"card\":\"Graph_card__1tFCa\",\"checkbox\":\"Graph_checkbox__j20qg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3LAG8\",\"spinner\":\"Filter_spinner__3IUcq\"};","export const PORTS = 'PORTS'\r\nexport const PORTS_SUCCESS = 'PORTS_SUCCESS'\r\nexport const PORTS_ERROR = 'PORTS_ERROR'\r\n\r\nexport const GRAPH = 'GRAPH'\r\nexport const GRAPH_SUCCESS = 'GRAPH_SUCCESS'\r\nexport const GRAPH_ERROR = 'GRAPH_ERROR'\r\n\r\nexport const DATE_FILTER = 'DATE_FILTER'\r\nexport const GRAPH_FILTER = 'GRAPH_FILTER'","export const ENV = {\r\n    ports: `https://685rp9jkj1.execute-api.eu-west-1.amazonaws.com/prod/ports`,\r\n    graph: `https://685rp9jkj1.execute-api.eu-west-1.amazonaws.com/prod/rates`\r\n}\r\nexport const API_KEY = 'us5CREOTW437CdO8lrete1Mh9pUuNAJr6pGWPL4L'","import { API_KEY } from \"constants/environment\"\r\n\r\nexport const HEADERS = {\r\n    headers:{\r\n        'X-Api-Key':API_KEY\r\n    }\r\n}\r\nexport const SUCCESS_RESPONSE = response => ({\r\n    data: response,\r\n    error: null,\r\n})\r\nexport const ERROR_RESPONSE = response => ({\r\n    data: null,\r\n    error: response || {},\r\n})","export const staticText = {\r\n    error: {\r\n        message: 'Error',\r\n        description: 'Something went wrong'\r\n    },\r\n    port: {\r\n        origin: 'Origin',\r\n        destination: 'Destination'\r\n    }\r\n}\r\n\r\nexport const graphTypes = ['mean', 'high', 'low']","import { Alert } from 'antd'\r\nimport { staticText } from 'constants/resource'\r\n\r\nconst ErrorMsg = ({ message, description }) => {\r\n    return (\r\n        <div style={{ maxWidth: '500px', margin: 10 }}>\r\n            <Alert\r\n                message={message}\r\n                description={description}\r\n                type=\"error\"\r\n                showIcon\r\n                closable\r\n            />\r\n        </div>\r\n    )\r\n}\r\nErrorMsg.defaultProps = {\r\n    message: staticText.error.message,\r\n    description: staticText.error.description\r\n}\r\nexport default ErrorMsg\r\n","import moment from 'moment'\r\n\r\nexport const DATE_FORMATS = {\r\n    xAxis: 'MMM DD',\r\n    server: 'YYYY-MM-DD'\r\n};\r\n\r\nexport const convertToTimeStamp = (day) => moment(day).valueOf();\r\n\r\nexport const formatTimeStamp = (timeStamp) => moment(timeStamp).format(DATE_FORMATS.xAxis);\r\n\r\nexport const formatGraphData = (data) => {\r\n    return data?.map(e => ({ ...e, day: convertToTimeStamp(e.day) }))\r\n}\r\n\r\nexport const filterDataWithinRange = (data, dateRange) => {\r\n    if (data && dateRange) {\r\n        return data.filter(e => moment(e.day).isSameOrAfter(dateRange[0].format(DATE_FORMATS.server)) &&\r\n            moment(e.day).isSameOrBefore(dateRange[1].format(DATE_FORMATS.server)))\r\n    }\r\n    return data\r\n}","import { GRAPH, GRAPH_ERROR, GRAPH_SUCCESS } from \"actions\";\r\nimport axios from \"axios\";\r\nimport { ENV } from \"constants/environment\";\r\nimport { ERROR_RESPONSE, HEADERS, SUCCESS_RESPONSE } from \"utils/httpHelper\";\r\nimport { formatGraphData } from \"utils/dateHelper\";\r\nexport const getGraphData = (payload) => {\r\n    return dispatch => {\r\n        dispatch({ type: GRAPH })\r\n        axios.get(appendQuery(payload), HEADERS)\r\n            .then(res => {\r\n                const payload = res.data\r\n                if (payload?.length && payload.find(e => e.high || e.low || e.mean)) {\r\n                    return dispatch({\r\n                        type: GRAPH_SUCCESS,\r\n                        payload: SUCCESS_RESPONSE(formatGraphData(res.data))\r\n                    });\r\n                }\r\n                dispatch({\r\n                    type: GRAPH_ERROR,\r\n                    payload: ERROR_RESPONSE({ message: 'No Data Present' })\r\n                });\r\n            })\r\n            .catch(err => {\r\n                console.error(err)\r\n                dispatch({\r\n                    type: GRAPH_ERROR,\r\n                    payload: ERROR_RESPONSE(err.response)\r\n                })\r\n            })\r\n    };\r\n}\r\n\r\nconst appendQuery = ({ origin, destination }) => `${ENV.graph}?origin=${origin}&destination=${destination}` ","import { Col, Select } from 'antd'\r\nconst { Option } = Select;\r\nconst SelectOption = ({ options, value, onChange, placeholder }) => {\r\n    return <Col span={8}>\r\n        <Select\r\n            showSearch\r\n            style={{ width: 200 }}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n            value={value}\r\n        >\r\n            {options.map(({ code, name }, i) => <Option key={i} value={code}>{name}</Option>)}\r\n        </Select>\r\n    </Col>\r\n}\r\nSelectOption.defaultProps = {\r\n    options: [],\r\n    value: null,\r\n    onChange: () => { },\r\n    placeholder: null\r\n}\r\nexport default SelectOption","import { useEffect, useState } from 'react';\r\nimport { Row } from 'antd'\r\nimport { useDispatch } from 'react-redux';\r\nimport { getGraphData } from 'actions/graphAction';\r\nimport SelectOption from 'components/SelectOption/SelectOption';\r\nimport { staticText } from 'constants/resource';\r\n\r\nconst PortSelector = ({ ports }) => {\r\n    const [activePort, setActivePort] = useState({ origin: null, destination: null });\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (activePort.origin && activePort.destination) {\r\n            dispatch(getGraphData(activePort))\r\n        }\r\n    }, [activePort])\r\n    return (<Row justify={'space-between'}>\r\n        <SelectOption options={ports.filter(e => e.code !== activePort.destination)}\r\n            value={activePort.origin}\r\n            onChange={(val) => setActivePort(prev => ({ ...prev, origin: val }))}\r\n            placeholder={staticText.port.origin} />\r\n        <SelectOption options={ports.filter(e => e.code !== activePort.origin)}\r\n            value={activePort.destination}\r\n            onChange={(val) => setActivePort(prev => ({ ...prev, destination: val }))}\r\n            placeholder={staticText.port.destination} />\r\n    </Row>\r\n    )\r\n}\r\nPortSelector.defaultProps = {\r\n    ports: [],\r\n}\r\n\r\nexport default PortSelector\r\n","import { useEffect, useState } from 'react';\r\nimport { DatePicker, Space, Spin } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ErrorMsg from 'components/ErrorMsg/ErrorMsg';\r\nimport PortSelector from 'components/PortSelector/PortSelector'\r\nimport styles from './Filter.module.css'\r\nimport { DATE_FILTER } from 'actions';\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst Filter = () => {\r\n    const [dateRange, setDateRange] = useState(null);\r\n    const { data, error, loading } = useSelector(state => state.port)\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch({ type: DATE_FILTER, payload: dateRange })\r\n    }, [dispatch, dateRange])\r\n    const onDateChange = (date) => {\r\n        setDateRange(date)\r\n    }\r\n    if (loading) return <Spin size=\"large\" className={styles.spinner} />\r\n    if (error) return <ErrorMsg />\r\n    return (\r\n        <Space direction=\"vertical\" size={20} className={styles.container}>\r\n            <PortSelector ports={data} />\r\n            <RangePicker onChange={onDateChange} value={dateRange} />\r\n        </Space>\r\n    )\r\n}\r\n\r\nexport default Filter\r\n","import { Spin, Checkbox, Card } from 'antd';\r\nimport ErrorMsg from 'components/ErrorMsg/ErrorMsg';\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\r\n} from 'recharts';\r\nimport { GRAPH_FILTER } from 'actions';\r\nimport styles from './Graph.module.css'\r\nimport { filterDataWithinRange, formatTimeStamp } from 'utils/dateHelper';\r\nimport { graphTypes } from 'constants/resource';\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\nconst Graph = () => {\r\n    const { data, loading, error, dateRange, filter = [] } = useSelector(state => state.graph)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch({ type: GRAPH_FILTER, payload: ['mean'] })\r\n    }, [dispatch])\r\n    if (loading) return <Spin size=\"large\" style={{ display: 'block' }} />\r\n    if (error) return <ErrorMsg description={error.message} />\r\n    const onChange = (payload) => {\r\n        dispatch({ type: GRAPH_FILTER, payload })\r\n    }\r\n    if (data)\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <ResponsiveContainer width={'75%'} height={300}>\r\n                    <LineChart\r\n                        width={1200}\r\n                        height={300}\r\n                        data={filterDataWithinRange(data, dateRange)}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n                        <XAxis\r\n                            dataKey=\"day\"\r\n                            type=\"number\"\r\n                            tickFormatter={formatTimeStamp}\r\n                            domain={dateRange?.map(e => e.valueOf()) || ['auto', 'auto']} />\r\n                        <YAxis\r\n                            domain={['dataMin - 10', 'dataMax + 10']}\r\n                            unit={' $'}\r\n                        />\r\n                        <Tooltip labelFormatter={(value) => formatTimeStamp(value)} formatter={(value)=>value+' $'}/>\r\n                        {graphTypes.map((e, i) => filter.includes(e) ? <Line connectNulls key={i} type=\"step\" dataKey={e} stroke=\"red\" dot={false} /> : '')}\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n                <Card title=\"Graph Type\" className={styles.card}>\r\n                    <CheckboxGroup className={styles.checkbox} options={graphTypes} value={filter} onChange={onChange} />\r\n                </Card>\r\n            </div>\r\n        )\r\n    return null\r\n}\r\n\r\nexport default Graph\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport 'antd/dist/antd.css';\r\nimport { getPorts } from 'actions/portAction';\r\nimport Filter from 'components/Filter/Filter';\r\nimport Graph from 'components/Graph/Graph';\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getPorts())\r\n    }, [dispatch])\r\n    return (\r\n        <div>\r\n            <Filter />\r\n            <Graph />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import { PORTS, PORTS_ERROR, PORTS_SUCCESS } from \"actions\";\r\nimport axios from \"axios\";\r\nimport { ENV } from \"constants/environment\";\r\nimport { ERROR_RESPONSE, HEADERS, SUCCESS_RESPONSE } from \"utils/httpHelper\";\r\n\r\nexport const getPorts = () => {\r\n    return dispatch => {\r\n        dispatch({ type: PORTS })\r\n        axios.get(ENV.ports, HEADERS)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: PORTS_SUCCESS,\r\n                    payload: SUCCESS_RESPONSE(res.data)\r\n                });\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: PORTS_ERROR,\r\n                    payload: ERROR_RESPONSE(err.response)\r\n                })\r\n            })\r\n    };\r\n}","import { PORTS, PORTS_ERROR, PORTS_SUCCESS } from \"actions\"\r\n\r\nconst port = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case PORTS:\r\n            return { loading: true }\r\n        case PORTS_SUCCESS:\r\n        case PORTS_ERROR:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default port","import { GRAPH, GRAPH_SUCCESS, GRAPH_ERROR, GRAPH_FILTER, DATE_FILTER } from \"actions\"\r\n\r\nconst graph = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case GRAPH:\r\n            return { ...state, loading: true }\r\n        case GRAPH_SUCCESS:\r\n        case GRAPH_ERROR:\r\n            return { ...state, loading: false, ...action.payload }\r\n        case DATE_FILTER:\r\n            return { ...state, dateRange: action.payload }\r\n        case GRAPH_FILTER:\r\n            return { ...state, filter: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default graph","import { combineReducers } from 'redux'\r\nimport port from './port'\r\nimport graph from './graph'\r\nexport default combineReducers({\r\n    port,\r\n    graph\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from 'reducers';\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from 'store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}